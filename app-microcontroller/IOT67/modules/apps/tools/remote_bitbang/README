Support for remote bitbang SWD access using openOCD

Copyright 2015 Cyprien Laplace <cyprien@cypou.net>

/* ****************************************************************************
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 *
 *************************************************************************** */


This app provides an SWD bridge for remote bitbang SWD access using openocd.
This allows remote debugging using gdb.

Warning: this is a work in progress.
We tried a few gdb commands with success (bt, cont, up, info registers, ...),
and some with less success (display, hbreak, watch).
We also need test at higher UART speed.


----------------
Get openOCD with the SWD bitbang patch from this git repository:
     http://gitweb.cypou.net/?p=openocd-code.git;a=shortlog;h=refs/heads/bitbang
  git clone http://gitweb.cypou.net/git/openocd-code.git
  git checkout -b bitbang origin/bitbang

----------------
Compile using:
  ./bootstrap
  ./configure --enable-remote-bitbang
  make

----------------
Install:
At your convenience, either :
  make install
Or :
  dest_dir="../openocd-use"
  mkdir $dest_dir
  cp -r src/openocd tcl/target/ tcl/*.tcl $dest_dir
  cd $dest_dir

----------------
Connection to the remote target :
You must connect P0_23 and P0_24 from this board to swdio and swdclk on target board.
Local         Remote
  P0_23  --->   swdio
  P0_24  --->   swdclk
  GND    --->   GND
You of course need to connect the module running the remote_bitbang app to the
host which will run openOCD, and provide power to the target, either from the
module running this app or from it's own power source.

----------------
Start OpenOCD with (change the /dev/ttyXXX and target/XXX according to your needs,
and add "./" if you chose the second option for installation):
  openocd -c "interface remote_bitbang; remote_bitbang_host /dev/ttyUSB0; transport select swd; gdb_port 3333; telnet_port 4444" -f target/lpc12xx.cfg

----------------
Run GDB for the app you want to debug (with the right architecture, certainly
arm-none-eabi-gdb, but adapt to your needs). Best is to run from the root
directory of the modules sources. For example:
  arm-none-eabi-gdb -tui apps/base/i2c_temp/i2c_temp.elf
  (gdb) target remote localhost:3333

And use GDB as usual. (Ctrl-C may help you stop the running app on your target).



